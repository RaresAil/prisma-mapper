generator client {
  provider        = "mock"
  previewFeatures = ["metrics", "multiSchema"]
  binaryTargets   = [env("mock"), "darwin-arm64", "debian-openssl-3.0.x"]
  engineType      = "mock"
  output          = env("mock")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["base", "transactional"]
}

model model_one {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  some_id    Int       @unique
  json       Json?     @db.Json
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)

  @@index([deleted_at, some_id], map: "index_name")
  @@schema("base")
}

model model_two {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  string      String?       @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?     @db.Timestamptz(6)
  deleted_at  DateTime?     @db.Timestamptz(6)
  some_int    Int
  some_uuid   String?       @db.Uuid
  model_three model_three[]

  @@index([deleted_at, created_at(sort: Desc)], map: "index_name_2")
  @@schema("transactional")
}

model model_three {
  model_two_id String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @db.Timestamptz(6)
  deleted_at   DateTime? @db.Timestamptz(6)
  model_two    model_two @relation(fields: [model_two_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([model_two_id], map: "index_name_3")
  @@schema("base")
}

model model_four {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  enum_one   enum_one    @default(some_value)
  enum_two   enum_two?
  enum_three enum_three?
  created_at DateTime    @default(now()) @db.Timestamptz(6)
  updated_at DateTime?   @db.Timestamptz(6)
  deleted_at DateTime?   @db.Timestamptz(6)
  @@schema("transactional")
}

enum enum_one {
  some_value
  single
  @@schema("base")
}

enum enum_two {
  SOME_VALUE
  SINGLE
  @@schema("transactional")
}

enum enum_three {
  someValue
  single
  @@schema("base")
}
