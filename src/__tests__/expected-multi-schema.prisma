generator client {
  provider        = "mock"
  previewFeatures = ["metrics", "multiSchema"]
  binaryTargets   = [env("mock"), "darwin-arm64", "debian-openssl-3.0.x"]
  engineType      = "mock"
  output          = env("mock")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["base", "transactional"]
}

model ModelOne {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  someId    Int       @unique @map("some_id")
  json      Json?     @db.Json
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  @@index([deletedAt, someId], map: "index_name")
  @@map("model_one")
  @@schema("base")
}

model ModelTwo {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  string     String?      @db.VarChar(255)
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime?    @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt  DateTime?    @map("deleted_at") @db.Timestamptz(6)
  someInt    Int          @map("some_int")
  someUuid   String?      @map("some_uuid") @db.Uuid
  ModelThree ModelThree[]

  @@index([deletedAt, createdAt(sort: Desc)], map: "index_name_2")
  @@map("model_two")
  @@schema("transactional")
}

model ModelThree {
  modelTwoId String    @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  ModelTwo   ModelTwo  @relation(fields: [modelTwoId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([modelTwoId], map: "index_name_3")
  @@map("model_three")
  @@schema("base")
}

model ModelFour {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  enumOne   EnumOne    @default(SomeValue) @map("enum_one")
  enumTwo   EnumTwo?   @map("enum_two")
  enumThree EnumThree? @map("enum_three")
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime?  @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime?  @map("deleted_at") @db.Timestamptz(6)

  @@map("model_four")
  @@schema("transactional")
}

enum EnumOne {
  SomeValue @map("some_value")
  Single    @map("single")

  @@map("enum_one")
  @@schema("base")
}

enum EnumTwo {
  SOME_VALUE
  SINGLE

  @@map("enum_two")
  @@schema("transactional")
}

enum EnumThree {
  SomeValue @map("someValue")
  Single    @map("single")

  @@map("enum_three")
  @@schema("base")
}
